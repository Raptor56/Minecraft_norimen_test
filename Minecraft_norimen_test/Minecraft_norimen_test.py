# -*- coding: utf-8 -*-

#############################################################
#
#道路端の法面処理を自動で行うテストプログラム
#対象ブロックとその斜め下のブロックを判定
#例（●：対象ブロック、■：崖判定ブロック）
#□●
#■□
#
#############################################################

import copy


def Del_Block(list, x, y):
    u"""削除したブロックの上にブロックがある場合、再帰処理によって上のブロックを削除
    """

    list[y][x] = 0

    if y == len(list) - 1 or list[y + 1][x] == 0:

        return

    else:
        Del_Block(list,x,y + 1)


w = 15
h = 10

#############################################################
#       処理を行う地形
#############################################################
#
#List = [[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0],  #9
#        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1],  #8
#        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1],  #7
#        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #6
#        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #5
#        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #4
#        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #3
#        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #2
#        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #1
#        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]  #0

List = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #0
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #1
        [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #2
        [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #3
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #4
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #5
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1],  #6
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1],  #7
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1],  #8
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0]]  #9


for j in reversed(range(0,h)):
    print(List[j])
print()


List_route = copy.deepcopy(List)         #対象ブロックの移動経路追跡用リスト

count = 0

i = 1
j = 1

while i < w:

    count += 1
    List_route[j][i] = 2             #対象ブロックの移動経路追跡用 "2"の場所が判定対象ブロックの移動経路
    print("【",i,j,"】\n",List[j][i-1],List[j][i],"\n",List[j-1][i-1])

    if List[j][i] == 0:             #対象ブロックが空気なら横へ移動し、次のブロックの処理へ

        i += 1
        continue

    elif List[j - 1][i - 1] == 0:   #対象ブロックが実体で、崖判定ブロックが空気なら崖と判定し以上のブロックを削除、横へ移動

        print("Del_Block")
        Del_Block(List,i,j)
        i += 1

    j += 1                          #対象ブロックが実体なら上へ移動
    if j == h:
        break

for j in reversed(range(0,h)):
    print(List[j])
print()

for j in reversed(range(0,h)):
    print(List_route[j])

print("\nstep_count =",count)

